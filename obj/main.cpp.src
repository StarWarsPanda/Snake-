	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	__Z12dataToStringmh
__Z12dataToStringmh:
	call	__frameset0
	ld	hl, 5
	push	hl
	call	__Znaj
	push	hl
	pop	iy
	pop	hl
	ld	l, 24
	ld	bc, (ix + 6)
	ld	a, (ix + 9)
	call	__lshru
	ld	a, c
	ld	(iy), a
	ld	l, 16
	ld	bc, (ix + 6)
	ld	a, (ix + 9)
	call	__lshru
	ld	a, c
	ld	(iy + 1), a
	ld	hl, (ix + 6)
	ld	a, h
	ld	(iy + 2), a
	ld	a, l
	ld	(iy + 3), a
	ld	a, (ix + 12)
	ld	(iy + 4), a
	lea	hl, iy + 0
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	__Z10staticDrawPKc
__Z10staticDrawPKc:
	ld	hl, -418
	call	__frameset
	ld	hl, (ix + 6)
	ld	de, L_.str
	ld	bc, 0
	ld	(ix + -3), de
	ld	de, -394
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), bc
	ld	de, (ix + -3)
	push	de
	push	hl
	call	_ti_Open
	ld	e, a
	ld	bc, -388
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), de
	pop	hl
	pop	hl
	push	de
	call	_ti_GetSize
	pop	de
	ld	de, 0
	ld	e, l
	ld	d, h
	ld	bc, -385
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), de
	ex	de, hl
	ld	bc, 9
	call	__imulu
	push	hl
	pop	de
	ld	hl, 0
	add	hl, sp
	or	a, a
	sbc	hl, de
	ld	sp, iy
	ld	(ix + -3), bc
	ld	bc, -388
	lea	iy, ix + 0
	add	iy, bc
	ld	de, (iy + 0)
	push	de
	push	ix
	ld	bc, -385
	add	ix, bc
	ld	de, (ix + 0)
	pop	ix
	push	de
	ld	de, 9
	push	de
	push	ix
	ld	de, -391
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	push	hl
	ld	bc, (ix + -3)
	call	_ti_Read
	push	ix
	ld	de, -385
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	pop	de
	pop	de
	pop	de
	pop	de
	or	a, a
	sbc	hl, bc
	jq	nz, BB1_51
	ld	de, -254
	lea	hl, ix + 0
	add	hl, de
	ld	de, -406
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	ld	de, -382
	lea	hl, ix + 0
	add	hl, de
	push	ix
	ld	de, -397
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	de, 1
	ld	(ix + -3), bc
	ld	bc, -391
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	inc	iy
	ld	bc, (ix + -3)
BB1_2:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB1_50
	ld	de, -385
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), bc
	ld	hl, (iy)
	ld	bc, (iy + 3)
	push	ix
	ld	de, -391
	add	ix, de
	ld	(ix + 0), iy
	pop	ix
	ld	e, (iy + 6)
	ld	d, (iy + 7)
	ld	(ix + -3), bc
	ld	bc, -394
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), e
	ld	(iy + 1), d
	push	ix
	ld	bc, -397
	add	ix, bc
	ld	de, (ix + 0)
	pop	ix
	push	de
	pop	iy
	lea	iy, iy + 0
	push	ix
	ld	bc, -400
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	ld	(iy), hl
	ld	bc, (ix + -3)
	ld	(ix + -3), de
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), bc
	ld	(iy + 3), bc
	push	ix
	ld	de, -394
	add	ix, de
	ld	l, (ix + 0)
	ld	h, (ix + 1)
	pop	ix
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	bc, iy + 0
	ld	de, (ix + -3)
	push	de
	pop	iy
	lea	iy, iy + 8
	ld	hl, -1
	ld	(iy), hl
	ld	(iy + 3), hl
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	call	__llcmpu
	call	__setflag
	ld	a, 1
	jq	m, BB1_5
	ld	a, 0
BB1_5:
	ld	bc, -391
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	ld	e, (iy + -1)
	ld	l, e
	rlc	l
	sbc	hl, hl
	ld	l, e
	bit	0, a
	jq	z, BB1_9
	ld	de, 98
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	bc, 25
	or	a, a
	sbc	hl, bc
	ld	(ix + -3), de
	ld	de, -385
	lea	hl, ix + 0
	push	af
	add	hl, de
	pop	af
	ld	bc, (hl)
	ld	de, (ix + -3)
	jq	nc, BB1_10
	ld	hl, LJTI1_1
	add	hl, de
	add	hl, de
	add	hl, de
	ld	hl, (hl)
	jp	(hl)
BB1_15:
	lea	iy, ix + -30
	ld	de, -400
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 28
	call	__llshru
	ld	de, 4095
	push	de
	pop	bc
	call	__iand
	ld	de, -409
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	lea	iy, ix + -22
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 20
	call	__llshru
	ld	de, 255
	push	de
	pop	bc
	call	__iand
	ld	de, -412
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	lea	iy, ix + -14
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 8
	call	__llshru
	ld	bc, 4095
	call	__iand
	push	hl
	pop	de
	ld	(ix + -3), de
	ld	de, -400
	lea	iy, ix + 0
	add	iy, de
	ld	hl, (iy + 0)
	ld	bc, 255
	call	__iand
	push	hl
	ld	de, (ix + -3)
	push	de
	ld	de, -412
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	de, -409
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	call	_gfx_FillRectangle
	jq	BB1_31
BB1_9:
	ld	de, 98
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	bc, 25
	or	a, a
	sbc	hl, bc
	ld	(ix + -3), de
	ld	de, -385
	lea	hl, ix + 0
	push	af
	add	hl, de
	pop	af
	ld	bc, (hl)
	ld	de, (ix + -3)
	jq	nc, BB1_10
	ld	hl, LJTI1_0
	add	hl, de
	add	hl, de
	add	hl, de
	ld	hl, (hl)
	jp	(hl)
BB1_12:
	ld	bc, -400
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_gfx_SetTextBGColor
	jq	BB1_13
BB1_29:
	ld	bc, -400
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_gfx_SetColor
	jq	BB1_13
BB1_36:
	ld	bc, -400
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_gfx_SetTextFGColor
	jq	BB1_13
BB1_42:
	ld	bc, -400
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_gfx_FillScreen
BB1_13:
	ld	de, -391
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	push	ix
	ld	de, -385
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	jq	BB1_35
BB1_17:
	lea	iy, ix + -46
	ld	de, -400
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 16
	call	__llshru
	ld	bc, 4095
	call	__iand
	ld	de, -409
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	lea	iy, ix + -38
	jq	BB1_18
BB1_19:
	lea	iy, ix + -62
	ld	de, -400
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 16
	call	__llshru
	ld	bc, 4095
	call	__iand
	ld	de, -409
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	lea	iy, ix + -54
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 8
	call	__llshru
	ld	bc, 255
	call	__iand
	push	hl
	pop	de
	ld	(ix + -3), de
	ld	de, -400
	lea	iy, ix + 0
	add	iy, de
	ld	hl, (iy + 0)
	call	__iand
	push	hl
	ld	de, (ix + -3)
	push	de
	ld	de, -409
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	call	_gfx_FillCircle
	jq	BB1_23
BB1_20:
	lea	iy, ix + -86
	ld	de, -400
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 28
	call	__llshru
	ld	de, 4095
	push	de
	pop	bc
	call	__iand
	ld	de, -409
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	lea	iy, ix + -78
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 20
	call	__llshru
	ld	de, 255
	push	de
	pop	bc
	call	__iand
	ld	de, -412
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	lea	iy, ix + -70
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 8
	call	__llshru
	ld	bc, 4095
	call	__iand
	push	hl
	pop	de
	ld	(ix + -3), de
	ld	de, -400
	lea	iy, ix + 0
	add	iy, de
	ld	hl, (iy + 0)
	ld	bc, 255
	call	__iand
	push	hl
	ld	de, (ix + -3)
	push	de
	ld	de, -412
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	de, -409
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	call	_gfx_Line
	jq	BB1_31
BB1_21:
	lea	iy, ix + -110
	ld	de, -400
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 32
	call	__llshru
	ld	bc, -409
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	push	ix
	ld	bc, -412
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	lea	iy, ix + -102
	push	ix
	ld	bc, -400
	add	ix, bc
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	bc, -403
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	bc, -394
	lea	hl, ix + 0
	add	hl, bc
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 24
	call	__llshru
	push	hl
	ld	bc, -412
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -409
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	__Z12dataToStringmh
	ld	de, -394
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	pop	hl
	pop	hl
	pop	hl
	ld	de, -391
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	bc, (hl)
	ld	de, -400
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), bc
	push	ix
	ld	de, -391
	add	ix, de
	ld	iy, (ix + 0)
	pop	ix
	ld	hl, (iy + 3)
	lea	iy, ix + 0
	add	iy, de
	ld	iy, (iy + 0)
	ld	e, (iy + 6)
	ld	d, (iy + 7)
	lea	iy, ix + -94
	ld	(iy), bc
	ld	(iy + 3), hl
	jq	BB1_22
BB1_24:
	ld	de, -134
	lea	iy, ix + 0
	add	iy, de
	ld	de, -400
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 28
	call	__llshru
	ld	de, 4095
	push	de
	pop	bc
	call	__iand
	ld	de, -409
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	lea	iy, ix + -126
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 20
	call	__llshru
	ld	de, 255
	push	de
	pop	bc
	call	__iand
	ld	de, -412
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	lea	iy, ix + -118
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 8
	call	__llshru
	ld	bc, 4095
	call	__iand
	push	hl
	pop	de
	ld	(ix + -3), de
	ld	de, -400
	lea	iy, ix + 0
	add	iy, de
	ld	hl, (iy + 0)
	ld	bc, 255
	call	__iand
	push	hl
	ld	de, (ix + -3)
	push	de
	ld	de, -412
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	de, -409
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	call	_gfx_Rectangle
	jq	BB1_31
BB1_26:
	ld	de, -406
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	lea	iy, iy + 80
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 48
	call	__llshru
	ld	de, 4095
	push	de
	pop	bc
	call	__iand
	ld	de, -409
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	push	ix
	ld	de, -406
	add	ix, de
	ld	iy, (ix + 0)
	pop	ix
	lea	iy, iy + 88
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 40
	call	__llshru
	ld	de, 255
	push	de
	pop	bc
	call	__iand
	ld	de, -412
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	push	ix
	ld	de, -406
	add	ix, de
	ld	iy, (ix + 0)
	pop	ix
	lea	iy, iy + 96
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 28
	call	__llshru
	ld	bc, 4095
	call	__iand
	ld	de, -415
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	push	ix
	ld	de, -406
	add	ix, de
	ld	iy, (ix + 0)
	pop	ix
	lea	iy, iy + 104
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 20
	call	__llshru
	ld	bc, 255
	call	__iand
	ld	de, -418
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	push	ix
	ld	de, -406
	add	ix, de
	ld	iy, (ix + 0)
	pop	ix
	lea	iy, iy + 112
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 8
	call	__llshru
	ld	bc, 4095
	call	__iand
	push	hl
	pop	de
	ld	(ix + -3), de
	ld	de, -400
	lea	iy, ix + 0
	add	iy, de
	ld	hl, (iy + 0)
	ld	bc, 255
	call	__iand
	push	hl
	ld	de, (ix + -3)
	push	de
	ld	de, -418
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	de, -415
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	de, -412
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	de, -409
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	call	_gfx_FillTriangle
	jq	BB1_44
BB1_27:
	ld	de, -406
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	lea	iy, iy + 72
	jq	BB1_46
BB1_28:
	ld	de, -406
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	lea	iy, iy + 64
	jq	BB1_48
BB1_30:
	ld	de, -406
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	lea	iy, iy + 40
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 28
	call	__llshru
	ld	de, 4095
	push	de
	pop	bc
	call	__iand
	ld	de, -409
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	push	ix
	ld	de, -406
	add	ix, de
	ld	iy, (ix + 0)
	pop	ix
	lea	iy, iy + 48
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 20
	call	__llshru
	ld	de, -412
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	push	ix
	ld	de, -406
	add	ix, de
	ld	iy, (ix + 0)
	pop	ix
	lea	iy, iy + 56
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 8
	call	__llshru
	ld	bc, 4095
	call	__iand
	ld	(ix + -3), bc
	ld	bc, -400
	lea	iy, ix + 0
	add	iy, bc
	ld	de, (iy + 0)
	push	de
	push	hl
	ld	de, -412
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	de, -409
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	bc, (ix + -3)
	call	_gfx_FillRectangle_NoClip
	jq	BB1_31
BB1_37:
	ld	de, -406
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	lea	iy, iy + 24
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 16
	call	__llshru
	ld	bc, 4095
	call	__iand
	ld	de, -409
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	push	ix
	ld	de, -406
	add	ix, de
	ld	iy, (ix + 0)
	pop	ix
	lea	iy, iy + 32
BB1_18:
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 8
	call	__llshru
	ld	bc, 255
	call	__iand
	push	hl
	pop	de
	ld	(ix + -3), de
	ld	de, -400
	lea	iy, ix + 0
	add	iy, de
	ld	hl, (iy + 0)
	call	__iand
	push	hl
	ld	de, (ix + -3)
	push	de
	ld	de, -409
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	call	_gfx_Circle
	jq	BB1_23
BB1_38:
	ld	de, -406
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	lea	iy, iy + 16
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 16
	call	__llshru
	ld	bc, 4095
	call	__iand
	push	hl
	pop	iy
	ld	(ix + -3), bc
	push	ix
	ld	bc, -400
	add	ix, bc
	ld	de, (ix + 0)
	pop	ix
	push	de
	pop	hl
	ld	bc, (ix + -3)
	ld	bc, 255
	call	__iand
	push	hl
	ld	l, d
	push	hl
	push	iy
	call	_gfx_FillCircle_NoClip
	jq	BB1_23
BB1_39:
	ld	de, -397
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	lea	iy, iy + 120
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 28
	call	__llshru
	ld	de, 4095
	push	de
	pop	bc
	call	__iand
	ld	de, -409
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	push	ix
	ld	de, -406
	add	ix, de
	ld	iy, (ix + 0)
	pop	ix
	lea	iy, iy + 0
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 20
	call	__llshru
	ld	de, -412
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	push	ix
	ld	de, -406
	add	ix, de
	ld	iy, (ix + 0)
	pop	ix
	lea	iy, iy + 8
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 8
	call	__llshru
	ld	bc, 4095
	call	__iand
	ld	(ix + -3), bc
	ld	bc, -400
	lea	iy, ix + 0
	add	iy, bc
	ld	de, (iy + 0)
	push	de
	push	hl
	ld	de, -412
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	de, -409
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	bc, (ix + -3)
	call	_gfx_Line_NoClip
	jq	BB1_31
BB1_40:
	ld	de, -397
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	lea	iy, iy + 96
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 32
	call	__llshru
	ld	bc, -409
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	push	ix
	ld	bc, -412
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	push	ix
	ld	bc, -397
	add	ix, bc
	ld	iy, (ix + 0)
	pop	ix
	lea	iy, iy + 104
	push	ix
	ld	bc, -400
	add	ix, bc
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	bc, -403
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	bc, -394
	lea	hl, ix + 0
	add	hl, bc
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 24
	call	__llshru
	push	hl
	ld	bc, -412
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -409
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	__Z12dataToStringmh
	ld	de, -394
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	pop	hl
	pop	hl
	pop	hl
	ld	de, -391
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	bc, (hl)
	ld	de, -400
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), bc
	push	ix
	ld	de, -391
	add	ix, de
	ld	iy, (ix + 0)
	pop	ix
	ld	hl, (iy + 3)
	lea	iy, ix + 0
	add	iy, de
	ld	iy, (iy + 0)
	ld	e, (iy + 6)
	ld	d, (iy + 7)
	ld	(ix + -3), de
	ld	de, -397
	lea	iy, ix + 0
	add	iy, de
	ld	iy, (iy + 0)
	lea	iy, iy + 112
	ld	(iy), bc
	ld	(iy + 3), hl
	ld	de, (ix + -3)
BB1_22:
	ld	(iy + 6), e
	ld	(iy + 7), d
	lea	hl, iy + 0
	ld	c, 8
	call	__llshru
	ld	bc, 4095
	call	__iand
	push	hl
	pop	de
	ld	(ix + -3), de
	ld	de, -400
	lea	iy, ix + 0
	add	iy, de
	ld	hl, (iy + 0)
	ld	bc, 255
	call	__iand
	push	hl
	ld	de, (ix + -3)
	push	de
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	call	_gfx_PrintStringXY
BB1_23:
	ld	de, -391
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	push	ix
	ld	de, -385
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	jq	BB1_33
BB1_41:
	ld	de, -397
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	lea	iy, iy + 72
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 28
	call	__llshru
	ld	de, 4095
	push	de
	pop	bc
	call	__iand
	ld	de, -409
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	push	ix
	ld	de, -397
	add	ix, de
	ld	iy, (ix + 0)
	pop	ix
	lea	iy, iy + 80
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 20
	call	__llshru
	ld	de, -412
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	push	ix
	ld	de, -397
	add	ix, de
	ld	iy, (ix + 0)
	pop	ix
	lea	iy, iy + 88
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 8
	call	__llshru
	ld	bc, 4095
	call	__iand
	ld	(ix + -3), bc
	ld	bc, -400
	lea	iy, ix + 0
	add	iy, bc
	ld	de, (iy + 0)
	push	de
	push	hl
	ld	de, -412
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	de, -409
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	bc, (ix + -3)
	call	_gfx_Rectangle_NoClip
BB1_31:
	ld	de, -391
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	push	ix
	ld	de, -385
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	jq	BB1_32
BB1_43:
	ld	de, -397
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	lea	iy, iy + 32
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 48
	call	__llshru
	ld	de, 4095
	push	de
	pop	bc
	call	__iand
	ld	de, -409
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	push	ix
	ld	de, -397
	add	ix, de
	ld	iy, (ix + 0)
	pop	ix
	lea	iy, iy + 40
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 40
	call	__llshru
	ld	de, 255
	push	de
	pop	bc
	call	__iand
	ld	de, -412
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	push	ix
	ld	de, -397
	add	ix, de
	ld	iy, (ix + 0)
	pop	ix
	lea	iy, iy + 48
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 28
	call	__llshru
	ld	bc, 4095
	call	__iand
	ld	de, -415
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	push	ix
	ld	de, -397
	add	ix, de
	ld	iy, (ix + 0)
	pop	ix
	lea	iy, iy + 56
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 20
	call	__llshru
	ld	bc, 255
	call	__iand
	ld	de, -418
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	push	ix
	ld	de, -397
	add	ix, de
	ld	iy, (ix + 0)
	pop	ix
	lea	iy, iy + 64
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 8
	call	__llshru
	ld	bc, 4095
	call	__iand
	push	hl
	pop	de
	ld	(ix + -3), de
	ld	de, -400
	lea	iy, ix + 0
	add	iy, de
	ld	hl, (iy + 0)
	ld	bc, 255
	call	__iand
	push	hl
	ld	de, (ix + -3)
	push	de
	ld	de, -418
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	de, -415
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	de, -412
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	de, -409
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	call	_gfx_FillTriangle_NoClip
BB1_44:
	ld	de, -391
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	push	ix
	ld	de, -385
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	pop	hl
	pop	hl
BB1_32:
	pop	hl
BB1_33:
	pop	hl
	jq	BB1_34
BB1_45:
	ld	de, -397
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	lea	iy, iy + 24
BB1_46:
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 8
	call	__llshru
	ld	bc, 4095
	call	__iand
	ld	(ix + -3), bc
	ld	bc, -400
	lea	iy, ix + 0
	add	iy, bc
	ld	de, (iy + 0)
	push	de
	push	hl
	ld	bc, (ix + -3)
	call	_gfx_SetPixel
	jq	BB1_49
BB1_47:
	ld	de, -397
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	lea	iy, iy + 16
BB1_48:
	push	ix
	ld	de, -400
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy), hl
	ld	de, -403
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 3), hl
	ld	de, -394
	lea	hl, ix + 0
	add	hl, de
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	l, e
	ld	h, d
	pop	de
	ld	(iy + 6), l
	ld	(iy + 7), h
	lea	hl, iy + 0
	ld	c, 4
	call	__llshru
	ld	a, l
	and	a, 15
	ld	l, a
	ld	bc, -400
	lea	iy, ix + 0
	add	iy, bc
	ld	de, (iy + 0)
	ld	a, e
	and	a, 15
	ld	e, a
	push	de
	push	hl
	call	_gfx_SetTextScale
BB1_49:
	ld	de, -391
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	push	ix
	ld	de, -385
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
BB1_34:
	pop	hl
BB1_35:
	pop	hl
BB1_10:
	lea	iy, iy + 9
	dec	bc
	ld	de, 1
	jq	BB1_2
BB1_50:
	ld	bc, -394
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), de
BB1_51:
	ld	bc, -388
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_ti_Close
	pop	hl
	ld	bc, -394
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
lJTI1_0:
	private	LJTI1_0
LJTI1_0:
	dl	BB1_12
	dl	BB1_29
	dl	BB1_10
	dl	BB1_10
	dl	BB1_30
	dl	BB1_36
	dl	BB1_10
	dl	BB1_37
	dl	BB1_38
	dl	BB1_10
	dl	BB1_39
	dl	BB1_10
	dl	BB1_10
	dl	BB1_10
	dl	BB1_40
	dl	BB1_10
	dl	BB1_41
	dl	BB1_42
	dl	BB1_43
	dl	BB1_10
	dl	BB1_10
	dl	BB1_10
	dl	BB1_45
	dl	BB1_10
	dl	BB1_47
lJTI1_1:
	private	LJTI1_1
LJTI1_1:
	dl	BB1_12
	dl	BB1_29
	dl	BB1_10
	dl	BB1_10
	dl	BB1_15
	dl	BB1_36
	dl	BB1_10
	dl	BB1_17
	dl	BB1_19
	dl	BB1_10
	dl	BB1_20
	dl	BB1_10
	dl	BB1_10
	dl	BB1_10
	dl	BB1_21
	dl	BB1_10
	dl	BB1_24
	dl	BB1_42
	dl	BB1_26
	dl	BB1_10
	dl	BB1_10
	dl	BB1_10
	dl	BB1_27
	dl	BB1_10
	dl	BB1_28

	section	.text,"ax",@progbits
	public	__Z10ditherHalfhh
__Z10ditherHalfhh:
	ld	hl, -9
	call	__frameset
	ld	l, (ix + 6)
	ld	e, -19
	ld	(ix + -6), de
	inc	e
	ld	(ix + -3), de
	ld	a, l
	or	a, a
	push	hl
	call	nz, _gfx_FillScreen
	pop	hl
	ld	a, (ix + 9)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 319
	push	hl
	call	_gfx_SetPixel
	pop	hl
	pop	hl
	ld	hl, -17
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetPixel
	pop	hl
	pop	hl
	ld	de, 240
	ld	iy, 2
BB2_3:
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	jq	nc, BB2_4
	ld	hl, (ix + -6)
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, -17
	push	hl
	push	iy
	ld	(ix + -9), iy
	call	_gfx_Line_NoClip
	ld	iy, (ix + -9)
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	de, 2
	add	iy, de
	ld	de, 240
	ld	hl, (ix + -6)
	ld	a, l
	add	a, -2
	ld	l, a
	ld	(ix + -6), hl
	jq	BB2_3
BB2_4:
	ld	de, 80
	ld	iy, 0
	ld	bc, 1
BB2_6:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	nc, BB2_7
	push	bc
	pop	iy
	ld	de, 239
	add	iy, de
	ld	(ix + -6), iy
	ld	hl, -17
	push	hl
	push	iy
	or	a, a
	sbc	hl, hl
	push	hl
	push	bc
	call	_gfx_Line_NoClip
	ld	iy, 0
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	de, -237
	ld	hl, (ix + -6)
	add	hl, de
	ld	de, 80
	push	hl
	pop	bc
	jq	BB2_6
BB2_7:
	ld	de, 238
BB2_9:
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	jq	nc, BB2_11
	ld	de, 81
	add	iy, de
	ld	(ix + -6), iy
	ld	hl, (ix + -3)
	push	hl
	ld	hl, 319
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	push	iy
	call	_gfx_Line_NoClip
	ld	iy, (ix + -6)
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -3)
	ld	a, l
	add	a, -2
	ld	l, a
	ld	(ix + -3), hl
	ld	de, -79
	add	iy, de
	ld	de, 238
	jq	BB2_9
BB2_11:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_main
_main:
	ld	hl, -975
	call	__frameset
	ld	bc, -928
	lea	iy, ix + 0
	add	iy, bc
	ld	bc, -931
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), iy
	lea	hl, iy + 22
	push	ix
	ld	bc, -941
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	lea	hl, iy + 1
	ld	bc, -934
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	call	__Z5setupv
	ld	hl, 900
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	bc, -941
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_memset
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -931
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	ld	(iy + 24), 1
	ld	(iy + 21), 0
	ld	hl, 20
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	bc, -934
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_memset
	pop	hl
	pop	hl
	pop	hl
	call	_ti_CloseAll
	ld	hl, L_.str
	push	hl
	ld	hl, L_.str.1
	push	hl
	call	_ti_Open
	ld	l, a
	pop	de
	pop	de
	or	a, a
	push	hl
	ld	hl, 1
	push	hl
	ld	hl, 20
	push	hl
	ld	bc, -934
	lea	hl, ix + 0
	push	af
	add	hl, bc
	pop	af
	ld	hl, (hl)
	push	hl
	call	nz, _ti_Read
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	call	_random
	ld	bc, 10
	call	__iremu
	ld	a, l
	add	a, 5
	ld	l, a
	ld	de, -944
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	call	_random
	ld	bc, 5
	call	__iremu
	ld	a, l
	add	a, 5
	ld	l, a
	push	ix
	ld	de, -947
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	call	_random
	ld	a, l
	and	a, 3
	inc	a
	ld	de, -953
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), a
	push	ix
	ld	de, -931
	add	ix, de
	ld	iy, (ix + 0)
	pop	ix
	ld	(iy + 22), 10
	ld	(iy + 23), 7
	ld	(iy + 24), 1
	ld	(iy + 25), 10
	ld	(iy + 26), 8
	ld	(iy + 27), 1
	ld	(iy + 28), 10
	ld	(iy + 29), 9
	ld	(iy + 30), 1
	ld	(iy + 31), 10
	ld	(iy + 32), 10
	ld	(iy + 33), 1
	ld	(iy + 0), 0
	call	_gfx_Begin
	call	_gfx_ZeroScreen
	ld	hl, 1
	push	hl
	call	_gfx_SetDraw
	pop	hl
	call	__Z6menuUIv
	ld	de, -931
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	ld	(iy + 0), 0
	ld	de, -941
	lea	iy, ix + 0
	add	iy, de
	ld	hl, (iy + 0)
	dec	hl
	push	ix
	ld	de, -956
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	xor	a, a
	ld	de, -938
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), a
	ld	bc, 0
	ld	e, a
	ld	(ix + -3), bc
	push	ix
	ld	bc, -952
	add	ix, bc
	ld	(ix + 0), a
	pop	ix
	push	ix
	ld	bc, -948
	add	ix, bc
	ld	(ix + 0), a
	pop	ix
	push	ix
	dec	bc
	add	ix, bc
	ld	(ix + 0), a
	pop	ix
	ld.sis	hl, 4
	push	ix
	ld	bc, -951
	add	ix, bc
	ld	(ix + 0), l
	ld	(ix + 1), h
	pop	ix
	ld	bc, (ix + -3)
BB3_1:
	push	bc
	pop	hl
	ld	bc, 1
	call	__ladd
	ld	(ix + -3), bc
	ld	bc, -934
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	push	ix
	dec	bc
	add	ix, bc
	ld	(ix + 0), e
	pop	ix
	ld	bc, (ix + -3)
	call	_kb_Scan
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jq	nz, BB3_4
	ld	hl, -1
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	de, 0
	ld	bc, -938
	lea	hl, ix + 0
	add	hl, bc
	ld	a, (hl)
	cp	a, 6
	jq	nc, BB3_6
	ld	e, a
	ld	hl, LJTI3_0
	add	hl, de
	add	hl, de
	add	hl, de
	ld	hl, (hl)
	jp	(hl)
BB3_8:
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 1
	call	__sand
	ld	a, l
	ld	d, 1
	xor	a, d
	bit	0, a
	ld	(ix + -3), bc
	ld	bc, -931
	lea	hl, ix + 0
	push	af
	add	hl, bc
	pop	af
	ld	iy, (hl)
	ld	bc, (ix + -3)
	jq	nz, BB3_10
	ld	a, (iy + 0)
	inc	a
	and	a, 3
	ld	(iy + 0), a
BB3_10:
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 8
	call	__sand
	ld	e, (iy + 0)
	ld	a, l
	or	a, a
	ld	a, 1
	jq	nz, BB3_12
	ld	a, 0
BB3_12:
	rrc	a
	sbc	a, a
	ld	c, a
	ld	a, e
	add	a, c
	cp	a, 4
	ld	e, 3
	jq	nc, BB3_14
	ld	e, a
BB3_14:
	cp	a, 4
	jq	nc, BB3_16
	ld	a, l
	or	a, a
	jq	z, BB3_17
BB3_16:
	ld	(iy + 0), e
BB3_17:
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 1
	call	__sand
	ld	a, l
	xor	a, d
	bit	0, a
	jq	nz, BB3_21
	ld	a, e
	or	a, a
	jq	nz, BB3_20
	call	_random
	ld	bc, 10
	call	__iremu
	ld	a, l
	add	a, 5
	ld	l, a
	ld	de, -944
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	call	_random
	push	ix
	ld	de, -931
	add	ix, de
	ld	iy, (ix + 0)
	pop	ix
	ld	bc, 5
	call	__iremu
	ld	a, l
	add	a, 5
	ld	l, a
	push	ix
	ld	de, -947
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	(iy + 22), 10
	ld	(iy + 23), 7
	ld	(iy + 24), 1
	ld	(iy + 25), 10
	ld	(iy + 26), 8
	ld	(iy + 27), 1
	ld	(iy + 28), 10
	ld	(iy + 29), 9
	ld	(iy + 30), 1
	ld	(iy + 31), 10
	ld	(iy + 32), 10
	ld	(iy + 33), 1
	xor	a, a
	dec	de
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), a
	ld.sis	hl, 4
	push	ix
	ld	de, -951
	add	ix, de
	ld	(ix + 0), l
	ld	(ix + 1), h
	pop	ix
BB3_20:
	pea	iy + 21
	push	iy
	call	__Z8UIChangeRhPv
	pop	hl
	pop	hl
BB3_21:
	call	__Z6menuUIv
	ld	hl, -25
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	bc, -931
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	ld	a, (iy + 0)
	cp	a, 4
	jq	nc, BB3_6
	ld	de, 0
	ld	e, a
	ld	hl, LJTI3_4
	add	hl, de
	add	hl, de
	add	hl, de
	ld	hl, (hl)
	jp	(hl)
BB3_40:
	ld	hl, 35
	push	hl
	ld	hl, 109
	push	hl
	ld	hl, 78
	jq	BB3_41
BB3_4:
	ld	bc, -931
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	ld	(iy + 21), -1
	ld	hl, -1
	push	hl
	call	_gfx_FillScreen
BB3_5:
	pop	hl
BB3_6:
	call	_gfx_SwapDraw
	ld	de, -931
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	ld	a, (iy + 21)
	ld	de, -938
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), a
	cp	a, -1
	ld	a, 0
	push	ix
	ld	de, -934
	push	af
	add	ix, de
	pop	af
	ld	bc, (ix + 0)
	pop	ix
	ld	(ix + -3), bc
	push	ix
	ld	bc, -935
	push	af
	add	ix, bc
	pop	af
	ld	e, (ix + 0)
	pop	ix
	ld	bc, (ix + -3)
	jq	nz, BB3_1
	jq	BB3_7
BB3_23:
	ld	bc, -931
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	ld	(iy + 21), 0
	call	__Z6menuUIv
	jq	BB3_6
BB3_24:
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 1
	call	__sand
	ld	de, -948
	lea	iy, ix + 0
	add	iy, de
	ld	a, (iy + 0)
	and	a, 1
	ld	e, a
	ld	d, 1
	xor	a, d
	xor	a, d
	bit	0, a
	jq	nz, BB3_28
	ld	a, l
	xor	a, d
	bit	0, a
	jq	nz, BB3_28
	call	_random
	ld	bc, 10
	call	__iremu
	ld	a, l
	add	a, 5
	ld	l, a
	ld	de, -944
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	call	_random
	ld	bc, 5
	call	__iremu
	ld	a, l
	add	a, 5
	ld	l, a
	push	ix
	ld	de, -947
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	de, -931
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	ld	(iy + 22), 10
	ld	(iy + 23), 7
	ld	(iy + 24), 1
	ld	(iy + 25), 10
	ld	(iy + 26), 8
	ld	(iy + 27), 1
	ld	(iy + 28), 10
	ld	(iy + 29), 9
	ld	(iy + 30), 1
	ld	(iy + 31), 10
	ld	(iy + 32), 10
	ld	(iy + 33), 1
	ld	a, 1
	ld	d, a
	ld.sis	hl, 4
	ld	(ix + -3), bc
	push	ix
	ld	bc, -951
	add	ix, bc
	ld	(ix + 0), l
	ld	(ix + 1), h
	pop	ix
	ld	bc, -948
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), a
	or	a, a
	sbc	hl, hl
	xor	a, a
	ld	e, a
	ld	bc, (ix + -3)
	jq	BB3_43
BB3_27:
	call	__Z8scoresUIv
	jq	BB3_6
BB3_28:
	ld	a, e
	xor	a, d
	bit	0, a
	jq	z, BB3_42
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 1
	call	__sand
	ld	a, l
	xor	a, d
	bit	0, a
	ld	de, -931
	lea	hl, ix + 0
	push	af
	add	hl, de
	pop	af
	ld	iy, (hl)
	jq	nz, BB3_31
	ld	a, (iy + 0)
	inc	a
	ld	c, 3
	call	__bremu
	ld	(iy + 0), a
BB3_31:
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 8
	call	__sand
	ld	e, (iy + 0)
	ld	a, l
	or	a, a
	ld	a, 1
	jq	nz, BB3_33
	ld	a, 0
BB3_33:
	rrc	a
	sbc	a, a
	ld	c, a
	ld	a, e
	add	a, c
	ld	e, a
	cp	a, 3
	jq	nc, BB3_35
	ld	a, l
	or	a, a
	jq	z, BB3_38
BB3_35:
	ld	a, e
	cp	a, 3
	ld	a, 2
	jq	nc, BB3_37
	ld	a, e
BB3_37:
	ld	(iy + 0), a
BB3_38:
	call	__Z4gmUIv
	ld	hl, -25
	push	hl
	call	_gfx_SetColor
	ld	bc, -931
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	pop	hl
	ld	l, (iy + 0)
	ld	a, l
	or	a, a
	jq	nz, BB3_64
	ld	hl, 41
	push	hl
	ld	hl, 111
	push	hl
	ld	hl, 72
	jq	BB3_41
BB3_42:
	ld	bc, -931
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	ld	d, (iy + 24)
	xor	a, a
	push	ix
	ld	bc, -934
	add	ix, bc
	ld	hl, (ix + 0)
	pop	ix
	push	ix
	dec	bc
	add	ix, bc
	ld	e, (ix + 0)
	pop	ix
BB3_43:
	push	ix
	ld	bc, -934
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	push	ix
	dec	bc
	add	ix, bc
	ld	(ix + 0), e
	pop	ix
	ld	bc, 7
	call	__lremu
	ld	(ix + -3), bc
	push	ix
	ld	bc, -962
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	push	ix
	dec	bc
	add	ix, bc
	ld	(ix + 0), e
	pop	ix
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	ld	bc, (ix + -3)
	jq	z, BB3_45
	xor	a, a
	ld	bc, -949
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), a
BB3_45:
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	cp	a, 0
	call	__setflag
	jq	p, BB3_47
	ld	a, 1
	ld	bc, -949
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), a
BB3_47:
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 1
	call	__sand
	ld	a, l
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB3_50
	ld	a, d
	cp	a, 1
	jq	z, BB3_50
	ld	(iy + 24), 3
	ld	d, 3
BB3_50:
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	1, a
	jq	z, BB3_53
	ld	a, d
	cp	a, 2
	jq	z, BB3_53
	ld	(iy + 24), 4
	ld	d, 4
BB3_53:
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	2, a
	jq	z, BB3_56
	ld	a, d
	cp	a, 4
	jq	z, BB3_56
	ld	(iy + 24), 2
	ld	d, 2
BB3_56:
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	3, a
	jq	z, BB3_59
	ld	a, d
	cp	a, 3
	jq	z, BB3_59
	ld	(iy + 24), 1
BB3_59:
	call	_gfx_ZeroScreen
	ld	bc, -934
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	dec	bc
	lea	iy, ix + 0
	add	iy, bc
	push	af
	ld	a, (iy + 0)
	ld	iyh, a
	pop	af
	ld	e, iyh
	ld	bc, 60
	ld	d, 0
	ld	a, d
	call	__lcmpu
	jq	nc, BB3_62
	ld	hl, 110
	push	hl
	ld	hl, 150
	push	hl
	ld	hl, L_.str.2
	jq	BB3_61
BB3_62:
	ld	e, iyh
	ld	bc, -61
	ld	iyl, -1
	ld	a, iyl
	call	__ladd
	ld	bc, 59
	ld	a, d
	call	__lcmpu
	jq	nc, BB3_66
	ld	hl, 110
	push	hl
	ld	hl, 150
	push	hl
	ld	hl, L_.str.3
	jq	BB3_61
BB3_64:
	ld	a, l
	cp	a, 1
	jq	nz, BB3_71
	ld	hl, 41
	push	hl
	ld	hl, 111
	push	hl
	ld	hl, 117
	jq	BB3_41
BB3_66:
	ld	bc, -934
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	e, iyh
	ld	bc, -121
	ld	a, iyl
	call	__ladd
	ld	bc, 29
	ld	a, d
	call	__lcmpu
	jq	nc, BB3_73
	ld	hl, 110
	push	hl
	ld	hl, 150
	push	hl
	ld	hl, L_.str.4
BB3_61:
	push	hl
	call	_gfx_PrintStringXY
BB3_74:
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 7
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	bc, -962
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	dec	bc
	lea	iy, ix + 0
	add	iy, bc
	ld	e, (iy + 0)
	call	__lcmpzero
	ld	a, 1
	push	ix
	dec	bc
	push	af
	add	ix, bc
	pop	af
	ld	(ix + 0), a
	pop	ix
	jq	nz, BB3_76
	ld	a, 0
	ld	bc, -964
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), a
BB3_76:
	ld	bc, -949
	lea	hl, ix + 0
	add	hl, bc
	ld	a, (hl)
	and	a, 1
	ld	bc, -938
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), a
	push	ix
	ld	bc, -934
	add	ix, bc
	ld	hl, (ix + 0)
	pop	ix
	push	ix
	dec	bc
	add	ix, bc
	ld	e, (ix + 0)
	pop	ix
	ld	bc, 180
	xor	a, a
	call	__lcmpu
	ld	a, 1
	ld	(ix + -3), bc
	push	ix
	ld	bc, -931
	push	af
	add	ix, bc
	pop	af
	ld	iy, (ix + 0)
	pop	ix
	ld	bc, (ix + -3)
	jq	c, BB3_78
	ld	a, 0
BB3_78:
	ld	bc, -968
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), a
	ld	de, 0
	push	ix
	ld	bc, -951
	add	ix, bc
	ld	l, (ix + 0)
	ld	h, (ix + 1)
	pop	ix
	ld	e, l
	ld	d, h
	ld	a, (iy + 0)
	ld	bc, -975
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), a
	inc	bc
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), de
	ex	de, hl
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	or	a, a
	sbc	hl, hl
	push	hl
	pop	iy
BB3_79:
	push	bc
	pop	hl
	lea	de, iy + 0
	or	a, a
	sbc	hl, de
	jq	z, BB3_126
	ld	de, -967
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), bc
	push	ix
	ld	bc, -959
	add	ix, bc
	ld	(ix + 0), iy
	pop	ix
	lea	de, iy + 0
	ld	bc, -941
	lea	iy, ix + 0
	add	iy, bc
	ld	iy, (iy + 0)
	add	iy, de
	ld	a, (iy)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	c, 4
	call	__ishl
	push	ix
	ld	de, -971
	add	ix, de
	ld	(ix + 0), iy
	pop	ix
	ld	a, (iy + 1)
	ld	b, 4
	call	__bshl
	ld	e, a
	ld	bc, 16
	push	bc
	push	bc
	push	de
	push	hl
	call	_gfx_FillRectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -964
	lea	hl, ix + 0
	add	hl, bc
	bit	0, (hl)
	jq	nz, BB3_84
	ld	bc, -968
	lea	hl, ix + 0
	add	hl, bc
	bit	0, (hl)
	jq	nz, BB3_84
	ld	bc, -938
	lea	hl, ix + 0
	add	hl, bc
	bit	0, (hl)
	jq	nz, BB3_84
	ld	bc, -959
	lea	hl, ix + 0
	add	hl, bc
	ld	de, (hl)
	ld	bc, -941
	lea	iy, ix + 0
	add	iy, bc
	ld	iy, (iy + 0)
	add	iy, de
	ld	a, (iy + 2)
	sub	a, 1
	cp	a, 4
	jq	c, BB3_85
BB3_84:
	ld	de, -931
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	ld	c, 1
BB3_110:
	ld	de, -938
	lea	hl, ix + 0
	add	hl, de
	ld	a, (hl)
	xor	a, c
	xor	a, c
	bit	0, a
	jq	nz, BB3_116
	ld	de, -959
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	ix
	ld	de, -967
	push	af
	add	ix, de
	pop	af
	ld	bc, (ix + 0)
	pop	ix
	jq	z, BB3_117
	ld	a, (iy + 22)
	ld	de, -971
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	d, (hl)
	cp	a, d
	jq	nz, BB3_118
	ld	(ix + -3), bc
	ld	bc, -931
	lea	iy, ix + 0
	add	iy, bc
	ld	iy, (iy + 0)
	ld	a, (iy + 23)
	push	hl
	pop	iy
	ld	e, (iy + 1)
	cp	a, e
	ld	a, 0
	ld	e, a
	ld	bc, (ix + -3)
	jq	z, BB3_115
	ld	(ix + -3), bc
	ld	bc, -948
	lea	hl, ix + 0
	add	hl, bc
	ld	e, (hl)
	ld	bc, (ix + -3)
BB3_115:
	ld	(ix + -3), bc
	ld	bc, -959
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	jq	BB3_119
BB3_116:
	ld	de, -967
	lea	hl, ix + 0
	add	hl, de
	ld	bc, (hl)
	ld	de, -959
	lea	iy, ix + 0
	add	iy, de
	ld	iy, (iy + 0)
	jq	BB3_125
BB3_117:
	ld	de, -959
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	jq	BB3_125
BB3_118:
	ld	(ix + -3), bc
	ld	bc, -948
	lea	hl, ix + 0
	add	hl, bc
	ld	e, (hl)
	ld	bc, -959
	lea	iy, ix + 0
	add	iy, bc
	ld	iy, (iy + 0)
BB3_119:
	ld	bc, (ix + -3)
	ld	a, d
	ld	(ix + -3), bc
	ld	bc, -944
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	cp	a, l
	ld	bc, (ix + -3)
	jq	nz, BB3_123
	ld	(ix + -3), bc
	ld	bc, -975
	lea	hl, ix + 0
	add	hl, bc
	ld	a, (hl)
	cp	a, 2
	ld	bc, (ix + -3)
	jq	nc, BB3_123
	ld	(ix + -3), bc
	ld	bc, -948
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), e
	lea	de, iy + 0
	ld	bc, -971
	lea	iy, ix + 0
	add	iy, bc
	ld	iy, (iy + 0)
	ld	a, (iy + 1)
	ld	bc, -947
	lea	iy, ix + 0
	add	iy, bc
	ld	hl, (iy + 0)
	cp	a, l
	ld	bc, (ix + -3)
	jq	nz, BB3_124
	call	_random
	ld	bc, 20
	call	__iremu
	ld	de, -944
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	call	_random
	push	ix
	ld	de, -959
	add	ix, de
	ld	iy, (ix + 0)
	pop	ix
	ld	bc, 15
	call	__iremu
	push	ix
	ld	de, -967
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	push	ix
	ld	de, -947
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	jq	BB3_125
BB3_123:
	ld	(ix + -3), bc
	ld	bc, -948
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), e
	ld	bc, (ix + -3)
BB3_125:
	ld	de, 3
	add	iy, de
	jq	BB3_79
BB3_85:
	ld	de, 0
	ld	e, a
	ld	hl, LJTI3_1
	add	hl, de
	add	hl, de
	add	hl, de
	ld	hl, (hl)
	ld	bc, -931
	lea	iy, ix + 0
	add	iy, bc
	ld	iy, (iy + 0)
	jp	(hl)
BB3_86:
	ld	bc, -971
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	ld	a, (iy + 1)
	dec	a
	cp	a, 15
	ld	l, 1
	jq	nc, BB3_88
	ld	l, 0
BB3_88:
	bit	0, l
	ld	e, 14
	ld	c, 1
	jq	nz, BB3_95
	ld	e, a
	jq	BB3_95
BB3_124:
	push	de
	pop	iy
	jq	BB3_125
BB3_91:
	ld	bc, -971
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	ld	a, (iy + 1)
	inc	a
	cp	a, 15
	ld	l, 1
	jq	nc, BB3_93
	ld	l, 0
BB3_93:
	bit	0, l
	ld	e, 0
	ld	c, 1
	jq	nz, BB3_95
	ld	e, a
BB3_95:
	ld	(ix + -3), bc
	ld	bc, -971
	lea	iy, ix + 0
	add	iy, bc
	ld	iy, (iy + 0)
	ld	(iy + 1), e
	bit	0, l
	ld	a, 1
	ld	bc, (ix + -3)
	jq	nz, BB3_97
	ld	de, -952
	lea	hl, ix + 0
	add	hl, de
	ld	a, (hl)
BB3_97:
	ld	de, -952
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), a
	ld	de, -931
	lea	iy, ix + 0
	add	iy, de
	ld	iy, (iy + 0)
	jq	BB3_110
BB3_98:
	ld	bc, -971
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	a, (hl)
	dec	a
	cp	a, 20
	ld	l, 1
	ld	d, l
	jq	nc, BB3_100
	ld	l, 0
	ld	d, l
BB3_100:
	bit	0, d
	ld	e, 19
	ld	c, 1
	jq	nz, BB3_107
	ld	e, a
	jq	BB3_107
BB3_103:
	ld	bc, -971
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	a, (hl)
	inc	a
	cp	a, 20
	ld	l, 1
	ld	d, l
	jq	nc, BB3_105
	ld	l, 0
	ld	d, l
BB3_105:
	bit	0, d
	ld	e, 0
	ld	c, 1
	jq	nz, BB3_107
	ld	e, a
BB3_107:
	ld	(ix + -3), bc
	ld	bc, -971
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	(hl), e
	bit	0, d
	ld	a, 1
	ld	bc, (ix + -3)
	jq	nz, BB3_109
	ld	de, -952
	lea	hl, ix + 0
	add	hl, de
	ld	a, (hl)
BB3_109:
	ld	de, -952
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), a
	jq	BB3_110
BB3_126:
	ld	bc, -938
	lea	hl, ix + 0
	add	hl, bc
	ld	a, (hl)
	ld	l, 1
	xor	a, l
	ld	bc, -959
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), a
	ld	hl, -32
	push	hl
	call	_gfx_SetColor
	pop	hl
	or	a, a
	sbc	hl, hl
	push	ix
	ld	bc, -944
	add	ix, bc
	ld	de, (ix + 0)
	pop	ix
	ld	l, e
	ld	c, 4
	call	__ishl
	ld	(ix + -3), bc
	push	ix
	ld	bc, -947
	add	ix, bc
	ld	de, (ix + 0)
	pop	ix
	ld	a, e
	ld	bc, (ix + -3)
	ld	b, 4
	call	__bshl
	ld	e, a
	ld	bc, 16
	push	bc
	push	bc
	push	de
	push	hl
	call	_gfx_FillRectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -959
	lea	hl, ix + 0
	add	hl, bc
	bit	0, (hl)
	call	z, __Z7pauseUIv
	ld	bc, -931
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	ld	e, (iy + 0)
	ld	a, e
	or	a, a
	ld	l, 1
	jq	z, BB3_128
	ld	a, e
	cp	a, 2
	jq	nz, BB3_130
BB3_128:
	push	ix
	ld	bc, -952
	add	ix, bc
	ld	a, (ix + 0)
	pop	ix
	and	a, 1
	xor	a, l
	bit	0, a
	jq	nz, BB3_130
	ld	(iy + 21), 0
	ld	(iy + 0), 0
	xor	a, a
	ld	e, a
	ld	bc, -952
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), a
BB3_130:
	ld	iyl, e
	ld	bc, -934
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	ix
	dec	bc
	add	ix, bc
	push	af
	ld	a, (ix + 0)
	ld	iyh, a
	pop	af
	pop	ix
	ld	e, iyh
	ld	bc, 35
	xor	a, a
	call	__lremu
	ld	(ix + -3), bc
	push	ix
	ld	bc, -959
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	ld	d, e
	ld	hl, 180
	ld	e, a
	ld	bc, (ix + -3)
	ld	(ix + -3), de
	push	ix
	ld	de, -934
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	ld	a, iyh
	ld	de, (ix + -3)
	call	__lcmpu
	jq	nc, BB3_212
	ld	bc, -959
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	e, d
	call	__lcmpzero
	jq	nz, BB3_212
	ld	a, iyl
	cp	a, 2
	ld	iyl, 0
	ld	de, -934
	lea	hl, ix + 0
	push	af
	add	hl, de
	pop	af
	ld	bc, (hl)
	jq	nz, BB3_134
	ld	de, -953
	lea	hl, ix + 0
	add	hl, de
	ld	a, (hl)
	sub	a, 1
	cp	a, 4
	jq	c, BB3_152
BB3_134:
	ld	de, -944
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	d, l
	ld	(ix + -3), bc
	ld	bc, -947
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	a, l
	ld	bc, -959
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), a
BB3_135:
	ld	bc, (ix + -3)
	jq	BB3_136
BB3_212:
	ld	bc, -944
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	d, l
	ld	bc, -947
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	a, l
	ld	bc, -959
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), a
	ld	iyl, 0
	ld	(ix + -3), de
	push	ix
	ld	de, -934
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	ld	de, (ix + -3)
BB3_136:
	ld	hl, 180
	ld	e, iyl
	ld	a, iyh
	call	__lcmpu
	ld	a, 1
	jq	nc, BB3_138
	ld	a, 0
BB3_138:
	bit	0, a
	jq	nz, BB3_146
	ld	bc, -962
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	dec	bc
	lea	iy, ix + 0
	add	iy, bc
	ld	e, (iy + 0)
	call	__lcmpzero
	ld	a, 1
	jq	nz, BB3_141
	ld	a, 0
BB3_141:
	bit	0, a
	jq	nz, BB3_146
	ld	bc, -938
	lea	hl, ix + 0
	add	hl, bc
	ld	a, (hl)
	ld	l, 1
	xor	a, l
	xor	a, l
	bit	0, a
	jq	nz, BB3_146
	ld	bc, -944
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), d
	ld	bc, -974
	lea	iy, ix + 0
	add	iy, bc
	ld	hl, (iy + 0)
	push	hl
	pop	de
	dec	de
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	(ix + -3), de
	push	ix
	ld	de, -956
	add	ix, de
	ld	iy, (ix + 0)
	pop	ix
	add	iy, bc
	ld	de, (ix + -3)
	push	ix
	ld	bc, -938
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	push	de
	pop	bc
BB3_144:
	push	bc
	pop	hl
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	m, BB3_148
	dec	bc
	lea	hl, iy + -3
	ld	a, (iy + -3)
	ld	(iy), a
	push	hl
	pop	iy
	jq	BB3_144
BB3_146:
	ld	l, d
BB3_147:
	ld	bc, -944
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	ld	bc, -959
	lea	hl, ix + 0
	add	hl, bc
	ld	a, (hl)
	ld	l, a
BB3_168:
	push	ix
	ld	bc, -947
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	jq	BB3_6
BB3_68:
	ld	hl, -32
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 35
	push	hl
	ld	hl, 109
	push	hl
	ld	hl, 116
	jq	BB3_41
BB3_69:
	ld	hl, -32
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 35
	push	hl
	ld	hl, 109
	push	hl
	ld	hl, -102
	jq	BB3_41
BB3_70:
	ld	hl, 35
	push	hl
	ld	hl, 109
	push	hl
	ld	hl, -64
	jq	BB3_41
BB3_71:
	ld	a, l
	cp	a, 2
	jq	nz, BB3_6
	ld	hl, 41
	push	hl
	ld	hl, 111
	push	hl
	ld	hl, -93
BB3_41:
	push	hl
	ld	hl, 106
	push	hl
	call	_gfx_Rectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	jq	BB3_5
BB3_73:
	ld	bc, -934
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	e, iyh
	ld	bc, -151
	ld	a, iyl
	call	__ladd
	ld	bc, 9
	ld	a, d
	call	__lcmpu
	ld	hl, 110
	push	hl
	ld	hl, 145
	push	hl
	ld	hl, L_.str.5
	push	hl
	call	c, _gfx_PrintStringXY
	jq	BB3_74
BB3_148:
	ld	bc, -931
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	ld	a, (iy + 22)
	push	ix
	ld	bc, -944
	add	ix, bc
	ld	l, (ix + 0)
	pop	ix
	cp	a, l
	jq	nz, BB3_166
	ld	a, (iy + 23)
	ld	bc, -959
	lea	iy, ix + 0
	add	iy, bc
	ld	e, (iy + 0)
	cp	a, e
	jq	nz, BB3_167
	ld	de, -938
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	(ix + -3), bc
	ld	bc, -941
	lea	iy, ix + 0
	add	iy, bc
	ld	iy, (iy + 0)
	add	iy, de
	ld	d, (iy)
	ld	e, (iy + 1)
	ld	a, (iy + 2)
	ld	bc, -938
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), a
	sub	a, 1
	cp	a, 4
	ld	bc, (ix + -3)
	jq	nc, BB3_210
	ld	bc, 0
	ld	c, a
	ld	hl, LJTI3_3
	add	hl, bc
	add	hl, bc
	add	hl, bc
	ld	hl, (hl)
	jp	(hl)
BB3_169:
	inc	e
	jq	BB3_210
BB3_152:
	ld	de, 0
	ld	e, a
	ld	hl, LJTI3_2
	add	hl, de
	add	hl, de
	add	hl, de
	ld	hl, (hl)
	jp	(hl)
BB3_153:
	ld	de, -944
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	inc	l
	push	hl
	pop	de
	ld	a, l
	cp	a, 20
	ld	a, 1
	jq	nc, BB3_155
	ld	a, 0
BB3_155:
	bit	0, a
	ld	h, 19
	jq	nz, BB3_157
	ld	h, e
BB3_157:
	bit	0, a
	ld	l, 4
	jq	nz, BB3_159
	ld	l, 1
BB3_159:
	ld	(ix + -3), bc
	push	ix
	ld	bc, -947
	add	ix, bc
	ld	de, (ix + 0)
	pop	ix
	dec	e
	push	ix
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	ld	a, e
	cp	a, 15
	ld	a, 1
	ld	bc, (ix + -3)
	jq	nc, BB3_161
	ld	a, 0
BB3_161:
	bit	0, a
	push	ix
	ld	de, -959
	push	af
	add	ix, de
	pop	af
	push	af
	ld	a, iyl
	ld	(ix + 0), a
	pop	af
	pop	ix
	ld	d, h
	jq	nz, BB3_163
	ld	e, l
	ld	(ix + -3), bc
	ld	bc, -947
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	ix
	ld	bc, -959
	add	ix, bc
	ld	(ix + 0), l
	pop	ix
	ld	l, e
	ld	bc, (ix + -3)
BB3_163:
	bit	0, a
	ld	a, 2
	ld	(ix + -3), bc
	push	ix
	ld	bc, -953
	push	af
	add	ix, bc
	pop	af
	ld	(ix + 0), a
	pop	ix
	ld	bc, (ix + -3)
	jq	nz, BB3_136
	ld	(ix + -3), bc
	push	ix
	ld	bc, -953
	add	ix, bc
	ld	(ix + 0), l
	jq	BB3_165
BB3_166:
	jq	BB3_147
BB3_167:
	ld	bc, -944
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	ld	l, e
	jq	BB3_168
BB3_170:
	ld	(ix + -3), bc
	ld	bc, -944
	lea	hl, ix + 0
	add	hl, bc
	ld	de, (hl)
	dec	e
	push	de
	pop	hl
	ld	a, e
	cp	a, 20
	ld	a, 1
	ld	bc, (ix + -3)
	jq	nc, BB3_172
	ld	a, 0
BB3_172:
	bit	0, a
	ld	e, iyl
	jq	nz, BB3_174
	ld	e, l
BB3_174:
	bit	0, a
	ld	l, 2
	jq	nz, BB3_176
	ld	l, 3
BB3_176:
	ld	(ix + -3), bc
	push	ix
	ld	bc, -944
	add	ix, bc
	ld	(ix + 0), l
	pop	ix
	ld	bc, -947
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	inc	l
	push	ix
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	ld	a, l
	cp	a, 15
	ld	a, 1
	ld	bc, (ix + -3)
	jq	nc, BB3_178
	ld	a, 0
BB3_178:
	bit	0, a
	ld	d, 14
	jq	nz, BB3_180
	ld	(ix + -3), bc
	ld	bc, -947
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	d, l
	ld	bc, (ix + -3)
BB3_180:
	ld	(ix + -3), bc
	ld	bc, -959
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), d
	bit	0, a
	ld	a, 4
	jq	BB3_181
BB3_184:
	ld	(ix + -3), bc
	ld	bc, -944
	lea	hl, ix + 0
	add	hl, bc
	ld	de, (hl)
	dec	e
	push	de
	pop	hl
	ld	a, e
	cp	a, 20
	ld	a, 1
	ld	bc, (ix + -3)
	jq	nc, BB3_186
	ld	a, 0
BB3_186:
	bit	0, a
	ld	e, iyl
	jq	nz, BB3_188
	ld	e, l
BB3_188:
	ld	(ix + -3), bc
	ld	bc, -944
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), e
	bit	0, a
	ld	l, 1
	ld	bc, (ix + -3)
	jq	nz, BB3_190
	ld	l, 4
BB3_190:
	push	ix
	ld	de, -964
	add	ix, de
	ld	(ix + 0), l
	pop	ix
	ld	(ix + -3), bc
	ld	bc, -947
	lea	hl, ix + 0
	add	hl, bc
	ld	de, (hl)
	dec	e
	push	de
	pop	hl
	ld	a, e
	cp	a, 15
	ld	a, 1
	ld	bc, (ix + -3)
	jq	nc, BB3_192
	ld	a, 0
BB3_192:
	bit	0, a
	ld	e, iyl
	jq	nz, BB3_194
	ld	e, l
BB3_194:
	ld	(ix + -3), bc
	ld	bc, -959
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), e
	bit	0, a
	ld	a, 3
	push	ix
	ld	bc, -953
	push	af
	add	ix, bc
	pop	af
	ld	(ix + 0), a
	pop	ix
	push	ix
	ld	bc, -944
	push	af
	add	ix, bc
	pop	af
	ld	d, (ix + 0)
	pop	ix
	ld	bc, (ix + -3)
	jq	nz, BB3_136
	ld	(ix + -3), bc
	ld	bc, -964
	jq	BB3_183
BB3_196:
	ld	de, -944
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	inc	l
	push	ix
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	a, l
	cp	a, 20
	ld	a, 1
	jq	nc, BB3_198
	ld	a, 0
BB3_198:
	bit	0, a
	ld	e, 19
	jq	nz, BB3_200
	ld	de, -944
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	e, l
BB3_200:
	bit	0, a
	ld	l, 3
	jq	nz, BB3_202
	ld	l, 2
BB3_202:
	ld	(ix + -3), bc
	push	ix
	ld	bc, -944
	add	ix, bc
	ld	(ix + 0), l
	pop	ix
	ld	bc, -947
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	inc	l
	push	ix
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	ld	a, l
	cp	a, 15
	ld	a, 1
	ld	bc, (ix + -3)
	jq	nc, BB3_204
	ld	a, 0
BB3_204:
	bit	0, a
	ld	d, 14
	jq	nz, BB3_206
	ld	(ix + -3), bc
	ld	bc, -947
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	d, l
	ld	bc, (ix + -3)
BB3_206:
	ld	(ix + -3), bc
	ld	bc, -959
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), d
	bit	0, a
	ld	a, 1
BB3_181:
	push	ix
	ld	bc, -953
	push	af
	add	ix, bc
	pop	af
	ld	(ix + 0), a
	pop	ix
	ld	d, e
	ld	bc, (ix + -3)
	jq	nz, BB3_136
	ld	(ix + -3), bc
	ld	bc, -944
BB3_183:
	lea	hl, ix + 0
	add	hl, bc
	ld	a, (hl)
	push	ix
	ld	bc, -953
	add	ix, bc
	ld	(ix + 0), a
BB3_165:
	pop	ix
	jq	BB3_135
BB3_207:
	dec	d
	jq	BB3_210
BB3_208:
	dec	e
	jq	BB3_210
BB3_209:
	inc	d
BB3_210:
	ld	(ix + -3), de
	ld	de, -951
	lea	hl, ix + 0
	add	hl, de
	ld	c, (hl)
	inc	hl
	ld	b, (hl)
	dec	hl
	inc.sis	bc
	or	a, a
	sbc	hl, hl
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), c
	ld	(iy + 1), b
	ld	l, c
	ld	h, b
	dec	hl
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	push	ix
	ld	de, -941
	add	ix, de
	ld	iy, (ix + 0)
	pop	ix
	add	iy, bc
	ld	de, (ix + -3)
	ld	(iy), d
	ld	(iy + 1), e
	push	ix
	ld	bc, -938
	add	ix, bc
	ld	a, (ix + 0)
	pop	ix
	ld	(iy + 2), a
	call	_random
	ld	bc, 20
	call	__iremu
	ld	de, -944
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	call	_random
	ld	bc, 15
	call	__iremu
	push	ix
	ld	de, -947
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	push	ix
	ld	de, -931
	add	ix, de
	ld	iy, (ix + 0)
	pop	ix
	ld	a, (iy + 0)
	cp	a, 2
	jq	nz, BB3_6
	call	_random
	ld	a, l
	and	a, 3
	inc	a
	ld	bc, -953
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), a
	jq	BB3_6
BB3_7:
	call	_gfx_End
	call	_ti_CloseAll
	or	a, a
	sbc	hl, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
lJTI3_0:
	private	LJTI3_0
LJTI3_0:
	dl	BB3_8
	dl	BB3_23
	dl	BB3_23
	dl	BB3_24
	dl	BB3_6
	dl	BB3_27
lJTI3_1:
	private	LJTI3_1
LJTI3_1:
	dl	BB3_86
	dl	BB3_103
	dl	BB3_91
	dl	BB3_98
lJTI3_2:
	private	LJTI3_2
LJTI3_2:
	dl	BB3_153
	dl	BB3_196
	dl	BB3_170
	dl	BB3_184
lJTI3_3:
	private	LJTI3_3
LJTI3_3:
	dl	BB3_169
	dl	BB3_207
	dl	BB3_208
	dl	BB3_209
lJTI3_4:
	private	LJTI3_4
LJTI3_4:
	dl	BB3_40
	dl	BB3_68
	dl	BB3_69
	dl	BB3_70

	section	.text,"ax",@progbits
	public	__Z5setupv
__Z5setupv:
	call	_ti_CloseAll
	ld	hl, -3144303
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	ld	l, a
	push	hl
	call	_srand
	pop	hl
	ld	hl, -3144303
	ld	a, (hl)
	ld	de, 0
	push	de
	pop	hl
	ld	l, a
	push	de
	push	hl
	call	_srandom
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextTransparentColor
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextBGColor
	pop	hl
	ld	hl, -1
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, 3
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	__Z6menuUIv
__Z6menuUIv:
	ld	hl, 41
	push	hl
	ld	hl, 33
	push	hl
	call	__Z10ditherHalfhh
	pop	hl
	pop	hl
	ld	hl, 3
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, 23
	push	hl
	ld	hl, 80
	push	hl
	ld	hl, L_.str.6
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, -1
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 35
	push	hl
	ld	hl, 109
	push	hl
	ld	hl, 78
	push	hl
	ld	hl, 106
	push	hl
	call	_gfx_Rectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 35
	push	hl
	ld	hl, 109
	push	hl
	ld	hl, 116
	push	hl
	ld	hl, 106
	push	hl
	call	_gfx_Rectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 35
	push	hl
	ld	hl, 109
	push	hl
	ld	hl, -102
	push	hl
	ld	hl, 106
	push	hl
	call	_gfx_Rectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 35
	push	hl
	ld	hl, 109
	push	hl
	ld	hl, -64
	push	hl
	ld	hl, 106
	push	hl
	call	_gfx_Rectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 38
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 33
	push	hl
	ld	de, 107
	push	de
	ld	hl, 79
	push	hl
	push	de
	call	_gfx_FillRectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 33
	push	hl
	ld	de, 107
	push	de
	ld	hl, 117
	push	hl
	push	de
	call	_gfx_FillRectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 33
	push	hl
	ld	de, 107
	push	de
	ld	hl, -101
	push	hl
	push	de
	call	_gfx_FillRectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 33
	push	hl
	ld	de, 107
	push	de
	ld	hl, -63
	push	hl
	push	de
	call	_gfx_FillRectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, 92
	push	hl
	ld	hl, 125
	push	hl
	ld	hl, L_.str.7
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 130
	push	hl
	ld	hl, 140
	push	hl
	ld	hl, L_.str.8
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 168
	push	hl
	ld	hl, 132
	push	hl
	ld	hl, L_.str.9
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 206
	push	hl
	ld	hl, 145
	push	hl
	ld	hl, L_.str.10
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 3
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	__Z7storeUIv
__Z7storeUIv:
	ld	hl, 33
	push	hl
	ld	hl, 41
	push	hl
	call	__Z10ditherHalfhh
	pop	hl
	pop	hl
	ld	hl, -25
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 16
	push	hl
	push	hl
	ld	hl, 4
	push	hl
	ld	hl, 217
	push	hl
	call	_gfx_FillRectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, -1
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 26
	push	hl
	ld	hl, 70
	push	hl
	ld	hl, 30
	push	hl
	ld	hl, 9
	push	hl
	call	_gfx_Rectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 26
	push	hl
	ld	hl, 112
	push	hl
	ld	hl, 30
	push	hl
	ld	hl, 83
	push	hl
	call	_gfx_Rectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 26
	push	hl
	ld	hl, 112
	push	hl
	ld	hl, 30
	push	hl
	ld	hl, 200
	push	hl
	call	_gfx_Rectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, -84
	push	hl
	ld	hl, 70
	push	hl
	ld	hl, 59
	push	hl
	ld	hl, 9
	push	hl
	call	_gfx_Rectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, -84
	push	hl
	ld	hl, 112
	push	hl
	ld	hl, 59
	push	hl
	ld	hl, 83
	push	hl
	call	_gfx_Rectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, -84
	push	hl
	ld	hl, 112
	push	hl
	ld	hl, 59
	push	hl
	ld	hl, 200
	push	hl
	call	_gfx_Rectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 10
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 24
	push	hl
	ld	hl, 68
	push	hl
	ld	hl, 31
	push	hl
	ld	hl, 10
	push	hl
	call	_gfx_FillRectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 24
	push	hl
	ld	hl, 110
	push	hl
	ld	hl, 31
	push	hl
	ld	hl, 84
	push	hl
	call	_gfx_FillRectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 24
	push	hl
	ld	hl, 110
	push	hl
	ld	hl, 31
	push	hl
	ld	hl, 201
	push	hl
	call	_gfx_FillRectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, -86
	push	hl
	ld	hl, 68
	push	hl
	ld	hl, 60
	push	hl
	ld	hl, 10
	push	hl
	call	_gfx_FillRectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, -86
	push	hl
	ld	hl, 110
	push	hl
	ld	hl, 60
	push	hl
	ld	hl, 84
	push	hl
	call	_gfx_FillRectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, -86
	push	hl
	ld	hl, 110
	push	hl
	ld	hl, 60
	push	hl
	ld	hl, 201
	push	hl
	call	_gfx_FillRectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, 34
	push	hl
	ld	hl, 25
	push	hl
	ld	hl, L_.str.14
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 45
	push	hl
	ld	hl, 34
	push	hl
	ld	hl, L_.str.15
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 34
	push	hl
	ld	hl, 118
	push	hl
	ld	hl, L_.str.16
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 45
	push	hl
	ld	hl, 88
	push	hl
	ld	hl, L_.str.17
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 34
	push	hl
	ld	hl, 214
	push	hl
	ld	hl, L_.str.18
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 45
	push	hl
	ld	hl, 205
	push	hl
	ld	hl, L_.str.17
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	__Z10settingsUIv
__Z10settingsUIv:
	ld	hl, 33
	push	hl
	ld	hl, 41
	push	hl
	call	__Z10ditherHalfhh
	pop	hl
	pop	hl
	ld	hl, -1
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 26
	push	hl
	ld	hl, 62
	push	hl
	ld	hl, -46
	push	hl
	ld	hl, 254
	push	hl
	call	_gfx_Rectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 26
	push	hl
	ld	hl, 87
	push	hl
	ld	hl, 10
	push	hl
	ld	hl, 12
	push	hl
	call	_gfx_Rectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 5
	push	hl
	ld	hl, 81
	push	hl
	ld	hl, 45
	push	hl
	ld	hl, 15
	push	hl
	call	_gfx_FillRectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 26
	push	hl
	ld	hl, 87
	push	hl
	ld	hl, 10
	push	hl
	ld	hl, 104
	push	hl
	call	_gfx_Rectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 16
	push	hl
	push	hl
	ld	hl, 40
	push	hl
	ld	hl, 126
	push	hl
	call	_gfx_Rectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 16
	push	hl
	push	hl
	ld	hl, 40
	push	hl
	ld	hl, 152
	push	hl
	call	_gfx_Rectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 13
	push	hl
	ld	hl, 91
	push	hl
	ld	hl, 63
	push	hl
	ld	hl, 12
	push	hl
	call	_gfx_Rectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 10
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 24
	push	hl
	ld	hl, 60
	push	hl
	ld	hl, -45
	push	hl
	ld	hl, 255
	push	hl
	call	_gfx_FillRectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 24
	push	hl
	ld	hl, 85
	push	hl
	ld	hl, 11
	push	hl
	ld	hl, 13
	push	hl
	call	_gfx_FillRectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 24
	push	hl
	ld	hl, 85
	push	hl
	ld	hl, 11
	push	hl
	ld	hl, 105
	push	hl
	call	_gfx_FillRectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 11
	push	hl
	ld	hl, 89
	push	hl
	ld	hl, 64
	push	hl
	ld	hl, 13
	push	hl
	call	_gfx_FillRectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, 219
	push	hl
	ld	hl, 261
	push	hl
	ld	hl, L_.str.19
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 14
	push	hl
	ld	hl, 31
	push	hl
	ld	hl, L_.str.20
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 25
	push	hl
	ld	hl, 16
	push	hl
	ld	hl, L_.str.21
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 14
	push	hl
	ld	hl, 108
	push	hl
	ld	hl, L_.str.22
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 25
	push	hl
	ld	hl, 123
	push	hl
	ld	hl, L_.str.23
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	__Z7pauseUIv
__Z7pauseUIv:
	ld	hl, 41
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	__Z10ditherHalfhh
	pop	hl
	pop	hl
	ld	hl, 10
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, -110
	push	hl
	ld	hl, 180
	push	hl
	ld	hl, 47
	push	hl
	ld	hl, 70
	push	hl
	call	_gfx_FillRectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, -1
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, -108
	push	hl
	ld	hl, 182
	push	hl
	ld	hl, 46
	push	hl
	ld	hl, 69
	push	hl
	call	_gfx_Rectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 41
	push	hl
	ld	hl, 174
	push	hl
	ld	hl, 50
	push	hl
	ld	hl, 73
	push	hl
	call	_gfx_Rectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 41
	push	hl
	ld	hl, 174
	push	hl
	ld	hl, 98
	push	hl
	ld	hl, 73
	push	hl
	call	_gfx_Rectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 41
	push	hl
	ld	hl, 174
	push	hl
	ld	hl, -108
	push	hl
	ld	hl, 73
	push	hl
	call	_gfx_Rectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 3
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, 59
	push	hl
	ld	hl, 90
	push	hl
	ld	hl, L_.str.24
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 107
	push	hl
	ld	hl, 112
	push	hl
	ld	hl, L_.str.25
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 158
	push	hl
	ld	hl, 111
	push	hl
	ld	hl, L_.str.26
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	__Z8scoresUIv
__Z8scoresUIv:
	ld	hl, 33
	push	hl
	ld	hl, 41
	push	hl
	call	__Z10ditherHalfhh
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	__Z8UIChangeRhPv
__Z8UIChangeRhPv:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	a, (hl)
	cp	a, 4
	jq	nc, BB10_2
	ld	bc, (ix + 9)
	ld	iy, L_switch.table._Z8UIChangeRhPv
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	add	iy, de
	ld	a, (iy)
	push	bc
	pop	hl
	ld	(hl), a
BB10_2:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	__Z4gmUIv
__Z4gmUIv:
	ld	hl, 33
	push	hl
	ld	hl, 41
	push	hl
	call	__Z10ditherHalfhh
	pop	hl
	pop	hl
	ld	hl, -1
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 41
	push	hl
	ld	hl, 111
	push	hl
	ld	hl, 72
	push	hl
	ld	hl, 106
	push	hl
	call	_gfx_Rectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 41
	push	hl
	ld	hl, 111
	push	hl
	ld	hl, 117
	push	hl
	ld	hl, 106
	push	hl
	call	_gfx_Rectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 41
	push	hl
	ld	hl, 111
	push	hl
	ld	hl, -93
	push	hl
	ld	hl, 106
	push	hl
	call	_gfx_Rectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 38
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 39
	push	hl
	ld	hl, 109
	push	hl
	ld	hl, 73
	push	hl
	ld	hl, 107
	push	hl
	call	_gfx_FillRectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 39
	push	hl
	ld	hl, 109
	push	hl
	ld	hl, 118
	push	hl
	ld	hl, 107
	push	hl
	call	_gfx_FillRectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 39
	push	hl
	ld	hl, 109
	push	hl
	ld	hl, -92
	push	hl
	ld	hl, 107
	push	hl
	call	_gfx_FillRectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 3
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, 17
	push	hl
	ld	hl, 55
	push	hl
	ld	hl, L_.str.7
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, 88
	push	hl
	ld	hl, 136
	push	hl
	ld	hl, L_.str.11
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 133
	push	hl
	ld	hl, 145
	push	hl
	ld	hl, L_.str.12
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 181
	push	hl
	ld	hl, 140
	push	hl
	ld	hl, L_.str.13
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	__Z4endlv
__Z4endlv:
	jp	_ti_CloseAll
	section	.text,"ax",@progbits

	section	.rodata,"a",@progbits
	private	L_.str
L_.str:
	db	"r",000o

	section	.rodata,"a",@progbits
	private	L_.str.1
L_.str.1:
	db	"SnakePP",000o

	section	.rodata,"a",@progbits
	private	L_.str.2
L_.str.2:
	db	"3",000o

	section	.rodata,"a",@progbits
	private	L_.str.3
L_.str.3:
	db	"2",000o

	section	.rodata,"a",@progbits
	private	L_.str.4
L_.str.4:
	db	"1",000o

	section	.rodata,"a",@progbits
	private	L_.str.5
L_.str.5:
	db	"GO!",000o

	section	.rodata,"a",@progbits
	private	L_.str.6
L_.str.6:
	db	"Snake++",000o

	section	.rodata,"a",@progbits
	private	L_.str.7
L_.str.7:
	db	"Game Modes",000o

	section	.rodata,"a",@progbits
	private	L_.str.8
L_.str.8:
	db	"Store",000o

	section	.rodata,"a",@progbits
	private	L_.str.9
L_.str.9:
	db	"Settings",000o

	section	.rodata,"a",@progbits
	private	L_.str.10
L_.str.10:
	db	"Quit",000o

	section	.rodata,"a",@progbits
	private	L_.str.11
L_.str.11:
	db	"Classic",000o

	section	.rodata,"a",@progbits
	private	L_.str.12
L_.str.12:
	db	"Wrap",000o

	section	.rodata,"a",@progbits
	private	L_.str.13
L_.str.13:
	db	"Winged",000o

	section	.rodata,"a",@progbits
	private	L_.str.14
L_.str.14:
	db	"POWER",000o

	section	.rodata,"a",@progbits
	private	L_.str.15
L_.str.15:
	db	"UPs",000o

	section	.rodata,"a",@progbits
	private	L_.str.16
L_.str.16:
	db	"SNAKE",000o

	section	.rodata,"a",@progbits
	private	L_.str.17
L_.str.17:
	db	"CUSTOMIZATION",000o

	section	.rodata,"a",@progbits
	private	L_.str.18
L_.str.18:
	db	"ENVIRONMENT",000o

	section	.rodata,"a",@progbits
	private	L_.str.19
L_.str.19:
	db	"RETURN",000o

	section	.rodata,"a",@progbits
	private	L_.str.20
L_.str.20:
	db	"SCREEN",000o

	section	.rodata,"a",@progbits
	private	L_.str.21
L_.str.21:
	db	"BRIGHTNESS",000o

	section	.rodata,"a",@progbits
	private	L_.str.22
L_.str.22:
	db	"BACKGROUND",000o

	section	.rodata,"a",@progbits
	private	L_.str.23
L_.str.23:
	db	"COLORS",000o

	section	.rodata,"a",@progbits
	private	L_.str.24
L_.str.24:
	db	"RESUME",000o

	section	.rodata,"a",@progbits
	private	L_.str.25
L_.str.25:
	db	"SAVE",000o

	section	.rodata,"a",@progbits
	private	L_.str.26
L_.str.26:
	db	"EXIT",000o

	section	.rodata,"a",@progbits
	private	L_switch.table._Z8UIChangeRhPv
L_switch.table._Z8UIChangeRhPv:
	db	"",003o,001o,002o,377o

	ident	"clang version 12.0.0 (https://github.com/jacobly0/llvm-project 170be88120e3aa88c20eea5615ba76b8f1d6c647)"
	extern	_random
	extern	_gfx_SetTextTransparentColor
	extern	__Unwind_SjLj_Register
	extern	__bremu
	extern	_gfx_SetTextFGColor
	extern	_gfx_Rectangle_NoClip
	extern	_gfx_Begin
	extern	_gfx_Line
	extern	__lcmpzero
	extern	_srand
	extern	_ti_Close
	extern	__sand
	extern	__ishl
	extern	__ladd
	extern	_ti_Read
	extern	_gfx_FillTriangle
	extern	__setflag
	extern	__Znaj
	extern	_gfx_Circle
	extern	__llshru
	extern	_srandom
	extern	__iand
	extern	_gfx_FillRectangle
	extern	_ti_Open
	extern	_ti_GetSize
	extern	_gfx_FillCircle_NoClip
	extern	_gfx_FillCircle
	extern	__lshru
	extern	_memset
	extern	__frameset
	extern	_gfx_SetTextBGColor
	extern	_gfx_FillRectangle_NoClip
	extern	_gfx_Line_NoClip
	extern	_kb_Scan
	extern	__lremu
	extern	_gfx_SwapDraw
	extern	_gfx_SetDraw
	extern	_gfx_FillScreen
	extern	__llcmpu
	extern	_ti_CloseAll
	extern	__Unwind_SjLj_Unregister
	extern	__iremu
	extern	_gfx_ZeroScreen
	extern	__imulu
	extern	_gfx_SetColor
	extern	_gfx_SetPixel
	extern	_gfx_Rectangle
	extern	__bshl
	extern	_gfx_PrintStringXY
	extern	_gfx_End
	extern	__lcmpu
	extern	_gfx_FillTriangle_NoClip
	extern	__frameset0
	extern	_gfx_SetTextScale
